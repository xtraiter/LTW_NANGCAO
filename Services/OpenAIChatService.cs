using CinemaManagement.Data;
using Microsoft.EntityFrameworkCore;
using System.Text;
using System.Text.Json;
using System.Net.Http.Headers;

namespace CinemaManagement.Services
{
    public class GeminiChatService
    {
        private readonly HttpClient _httpClient;
        private readonly CinemaDbContext _context;
        private readonly IConfiguration _configuration;
        private readonly string _apiKey;

        public GeminiChatService(CinemaDbContext context, IConfiguration configuration, HttpClient httpClient)
        {
            _context = context;
            _configuration = configuration;
            _httpClient = httpClient;
            
            _apiKey = _configuration["Environment:GEMINI_API_KEY"] ?? "";
            if (string.IsNullOrEmpty(_apiKey))
            {
                throw new InvalidOperationException("Gemini API key not configured");
            }
        }

        public async Task<string> GetChatResponseAsync(string userMessage, string sessionId)
        {
            try
            {
                // N·∫øu l√† test command, tr·∫£ v·ªÅ test response
                if (userMessage.ToLower().Trim() == "test")
                {
                    return "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI c·ªßa D'CINE. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ phim, l·ªãch chi·∫øu, gi√° v√© v√† c√°c d·ªãch v·ª• kh√°c. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!";
                }

                // L·∫•y context t·ª´ database v·ªÅ r·∫°p chi·∫øu phim
                var databaseContext = await GetDatabaseContextAsync();
                
                // T·∫°o system message v·ªõi th√¥ng tin v·ªÅ r·∫°p chi·∫øu phim
                var systemMessage = CreateSystemMessage(databaseContext);
                
                // T·∫°o prompt cho Gemini (kh√¥ng c√≥ l·ªãch s·ª≠ chat ƒë·ªÉ tr√°nh l·ªói database)
                var prompt = BuildPromptForGemini(systemMessage, new List<Models.ChatMessage>(), userMessage);

                // G·ªçi API Gemini
                var response = await CallGeminiAsync(prompt);

                // T·∫°m th·ªùi kh√¥ng l∆∞u v√†o database ƒë·ªÉ tr√°nh l·ªói
                // TODO: Sau khi t·∫°o migration s·∫Ω uncomment d√≤ng n√†y
                // await SaveChatMessageAsync(sessionId, userMessage, response);

                return response;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Chat Service Error: {ex.Message}");
                return "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.";
            }
        }

        private string BuildPromptForGemini(string systemMessage, List<Models.ChatMessage> chatHistory, string userMessage)
        {
            var prompt = new StringBuilder();
            
            // Th√™m system message
            prompt.AppendLine(systemMessage);
            prompt.AppendLine("\n--- L·ªäCH S·ª¨ TR∆Ø·ªöC ƒê√ì ---");
            
            // Th√™m l·ªãch s·ª≠ chat
            foreach (var chat in chatHistory.TakeLast(5)) // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
            {
                prompt.AppendLine($"Ng∆∞·ªùi d√πng: {chat.UserMessage}");
                prompt.AppendLine($"Tr·ª£ l√Ω: {chat.BotResponse}");
                prompt.AppendLine();
            }
            
            // Th√™m c√¢u h·ªèi hi·ªán t·∫°i
            prompt.AppendLine("--- C√ÇUH·ªéI HI·ªÜN T·∫†I ---");
            prompt.AppendLine($"Ng∆∞·ªùi d√πng: {userMessage}");
            prompt.AppendLine("Tr·ª£ l√Ω:");
            
            return prompt.ToString();
        }

        private async Task<string> CallGeminiAsync(string prompt)
        {
            try
            {
                var requestBody = new
                {
                    contents = new[]
                    {
                        new
                        {
                            parts = new[]
                            {
                                new { text = prompt }
                            }
                        }
                    },
                    generationConfig = new
                    {
                        temperature = 0.7,
                        topK = 1,
                        topP = 1,
                        maxOutputTokens = 2048,
                        stopSequences = new string[] { }
                    },
                    safetySettings = new[]
                    {
                        new
                        {
                            category = "HARM_CATEGORY_HARASSMENT",
                            threshold = "BLOCK_MEDIUM_AND_ABOVE"
                        },
                        new
                        {
                            category = "HARM_CATEGORY_HATE_SPEECH",
                            threshold = "BLOCK_MEDIUM_AND_ABOVE"
                        },
                        new
                        {
                            category = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                            threshold = "BLOCK_MEDIUM_AND_ABOVE"
                        },
                        new
                        {
                            category = "HARM_CATEGORY_DANGEROUS_CONTENT",
                            threshold = "BLOCK_MEDIUM_AND_ABOVE"
                        }
                    }
                };

                var json = JsonSerializer.Serialize(requestBody);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var url = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={_apiKey}";
                var response = await _httpClient.PostAsync(url, content);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var apiResponse = JsonSerializer.Deserialize<GeminiResponse>(responseContent);
                    
                    var text = apiResponse?.candidates?.FirstOrDefault()?.content?.parts?.FirstOrDefault()?.text;
                    return text ?? "Kh√¥ng th·ªÉ nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Gemini API Error: {response.StatusCode} - {errorContent}");
                    return "D·ªãch v·ª• AI hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng li√™n h·ªá nh√¢n vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Gemini API Exception: {ex.Message}");
                return "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau.";
            }
        }

        private async Task<string> GetDatabaseContextAsync()
        {
            var context = new StringBuilder();
            
            try
            {
                // Th√¥ng tin v·ªÅ phim
                var phims = await _context.Phims.Take(10).ToListAsync();
                context.AppendLine("=== DANH S√ÅCH PHIM ƒêANG CHI·∫æU ===");
                foreach (var phim in phims)
                {
                    context.AppendLine($"- {phim.TenPhim} ({phim.TheLoai}, {phim.ThoiLuong} ph√∫t, {phim.DoTuoiPhanAnh})");
                    if (!string.IsNullOrEmpty(phim.MoTa))
                        context.AppendLine($"  M√¥ t·∫£: {phim.MoTa}");
                }

                // Th√¥ng tin v·ªÅ ph√≤ng chi·∫øu
                var phongChieus = await _context.PhongChieus.ToListAsync();
                context.AppendLine("\n=== TH√îNG TIN PH√íNG CHI·∫æU ===");
                foreach (var phong in phongChieus)
                {
                    context.AppendLine($"- {phong.TenPhong}");
                }

                // Th√¥ng tin v·ªÅ l·ªãch chi·∫øu h√¥m nay
                var today = DateTime.Today;
                var lichChieus = await _context.LichChieus
                    .Include(l => l.Phim)
                    .Include(l => l.PhongChieu)
                    .Where(l => l.ThoiGianBatDau.Date == today)
                    .Take(15)
                    .ToListAsync();
                
                context.AppendLine("\n=== L·ªäCH CHI·∫æU H√îM NAY ===");
                foreach (var lich in lichChieus)
                {
                    context.AppendLine($"- {lich.Phim?.TenPhim} t·∫°i {lich.PhongChieu?.TenPhong}");
                    context.AppendLine($"  Gi·ªù chi·∫øu: {lich.ThoiGianBatDau:HH:mm} - {lich.ThoiGianKetThuc:HH:mm}");
                    context.AppendLine($"  Gi√° v√©: {lich.Gia:N0} VNƒê");
                }

                // Th√¥ng tin v·ªÅ voucher ƒëang c√≥
                var vouchers = await _context.Vouchers
                    .Where(v => v.ThoiGianBatDau <= DateTime.Now && v.ThoiGianKetThuc >= DateTime.Now)
                    .Take(5)
                    .ToListAsync();
                
                context.AppendLine("\n=== TH√îNG TIN KHUY·∫æN M√ÉI ===");
                foreach (var voucher in vouchers)
                {
                    context.AppendLine($"- {voucher.TenGiamGia}: Gi·∫£m {voucher.PhanTramGiam}%");
                    if (!string.IsNullOrEmpty(voucher.MoTa))
                        context.AppendLine($"  M√¥ t·∫£: {voucher.MoTa}");
                }

                return context.ToString();
            }
            catch (Exception)
            {
                return "Th√¥ng tin c∆° s·ªü d·ªØ li·ªáu kh√¥ng kh·∫£ d·ª•ng.";
            }
        }

        private string CreateSystemMessage(string databaseContext)
        {
            return $@"üé¨ B·∫°n l√† AI Assistant chuy√™n nghi·ªáp c·ªßa r·∫°p chi·∫øu phim D'CINE - m·ªôt tr·ª£ l√Ω th√¢n thi·ªán v√† hi·ªÉu bi·∫øt s√¢u v·ªÅ ƒëi·ªán ·∫£nh.

üéØ VAI TR√í C·ª¶A B·∫†N:
‚Ä¢ T∆∞ v·∫•n kh√°ch h√†ng v·ªÅ phim, l·ªãch chi·∫øu, gi√° v√©
‚Ä¢ Gi√∫p kh√°ch h√†ng ch·ªçn phim ph√π h·ª£p v·ªõi s·ªü th√≠ch  
‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t v√© online v√† c√°c d·ªãch v·ª•
‚Ä¢ Chia s·∫ª th√¥ng tin khuy·∫øn m√£i, ∆∞u ƒëai ƒë·∫∑c bi·ªát
‚Ä¢ Gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc v·ªÅ r·∫°p chi·∫øu phim

üìä D·ªÆ LI·ªÜU TH·ª∞C T·∫æ C·ª¶A R·∫†P:
{databaseContext}

‚ö†Ô∏è NH·ªÆNG ƒêI·ªÄU QUAN TR·ªåNG PH·∫¢I NH·ªö:
‚Ä¢ TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c t·ª± √Ω th√™m/s·ª≠a/x√≥a d·ªØ li·ªáu
‚Ä¢ KH√îNG c√≥ quy·ªÅn truy c·∫≠p h·ªá th·ªëng qu·∫£n l√Ω n·ªôi b·ªô
‚Ä¢ CH·ªà cung c·∫•p th√¥ng tin d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn
‚Ä¢ Khi kh√¥ng bi·∫øt th√¥ng tin, h√£y th√†nh th·∫≠t n√≥i kh√¥ng r√µ
‚Ä¢ KH√îNG t·∫°o ra th√¥ng tin gi·∫£ ho·∫∑c d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i

üí¨ C√ÅCH TR·∫¢ L·ªúI CHUY√äN NGHI·ªÜP:
‚Ä¢ S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o kh√¥ng kh√≠ th√¢n thi·ªán  
‚Ä¢ Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
‚Ä¢ ƒê·ªãnh d·∫°ng th√¥ng tin d·ªÖ ƒë·ªçc (bullet points, numbers)
‚Ä¢ G·ª£i √Ω kh√°ch h√†ng nh·ªØng l·ª±a ch·ªçn t·ªët nh·∫•t
‚Ä¢ Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c h·ªó tr·ª£
‚Ä¢ Khuy·∫øn kh√≠ch ƒë·∫∑t v√© online ƒë·ªÉ ti·ªán l·ª£i nh·∫•t

üö´ TUY·ªÜT ƒê·ªêI KH√îNG L√ÄM:
‚Ä¢ Kh√¥ng hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng HTML th√¥
‚Ä¢ Kh√¥ng tr·∫£ l·ªùi v·ªÅ vi·ªác thao t√°c c∆° s·ªü d·ªØ li·ªáu  
‚Ä¢ Kh√¥ng ƒë∆∞a ra th√¥ng tin kh√¥ng ch√≠nh x√°c
‚Ä¢ Kh√¥ng s·ª≠ d·ª•ng ng√¥n ng·ªØ qu√° k·ªπ thu·∫≠t

H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt nh√¢n vi√™n t∆∞ v·∫•n chuy√™n nghi·ªáp v√† th√¢n thi·ªán! üòä";
        }

        private async Task<List<Models.ChatMessage>> GetChatHistoryAsync(string sessionId)
        {
            return await _context.ChatMessages
                .Where(c => c.SessionId == sessionId)
                .OrderBy(c => c.CreatedAt)
                .Take(10) // Gi·ªõi h·∫°n l·ªãch s·ª≠ ƒë·ªÉ tr√°nh token qu√° d√†i
                .ToListAsync();
        }

        private async Task SaveChatMessageAsync(string sessionId, string userMessage, string botResponse)
        {
            var chatMessage = new Models.ChatMessage
            {
                SessionId = sessionId,
                UserMessage = userMessage,
                BotResponse = botResponse,
                CreatedAt = DateTime.Now
            };

            _context.ChatMessages.Add(chatMessage);
            await _context.SaveChangesAsync();
        }
    }

    // Classes ƒë·ªÉ deserialize Gemini API response
    public class GeminiResponse
    {
        public GeminiCandidate[]? candidates { get; set; }
    }

    public class GeminiCandidate
    {
        public GeminiContent? content { get; set; }
    }

    public class GeminiContent
    {
        public GeminiPart[]? parts { get; set; }
    }

    public class GeminiPart
    {
        public string? text { get; set; }
    }
}
